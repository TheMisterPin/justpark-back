import { PrismaClient } from '@prisma/client'
import { hashSync } from 'bcrypt'
import express from 'express'

const prisma = new PrismaClient()

async function getAllWardens(req: express.Request, res: express.Response) {
  try {
    const wardenAssignments = await prisma.wardenAssignment.findMany({
      include: { user: true }
    })
    const uniqueUsers = new Map()
    wardenAssignments.forEach(wa => {
      uniqueUsers.set(wa.userId, wa.user)
    })
    res.json(Array.from(uniqueUsers.values()))
  } catch (error) {
    res.status(500).json({ message: 'Failed to retrieve all wardens', error: error.message })
  }
}

async function getParkingWardens(req: express.Request, res: express.Response) {
  const { parkingID } = req.params
  const owner = req.user

  try {
    const parking = await prisma.parking.findUnique({
      where: { id: parseInt(parkingID) },
      include: { parkingAdmin: true }
    })

    if (!parking) {
      res.status(404).json({ message: 'Parking not found' })
      return
    }

    if (parking.parkingAdminId !== owner?.id) {
      res.status(403).json({ message: 'You are not authorized to view wardens for this parking' })
      return
    }

    const wardens = await prisma.wardenAssignment.findMany({
      where: { parkingId: parseInt(parkingID) },
      include: { user: true }
    })

    res.json(wardens.map(w => w.user))
  } catch (error) {
    res.status(500).json({ message: 'Failed to retrieve parking wardens', error: error.message })
  }
}

async function addWarden(req: express.Request, res: express.Response) {
  const { parkingID } = req.params
  const { name, email, password } = req.body

  try {
    const parking = await prisma.parking.findUnique({
      where: { id: parseInt(parkingID) },
      include: { parkingAdmin: true }
    })

    if (!parking) {
      res.status(404).json({ message: 'Parking not found' })
      return
    }

    const newWarden = await prisma.user.create({
      data: {
        name,
        email,
        password: hashSync(password, 10),
        role: 'WARDEN'
      }
    })
    await prisma.wardenAssignment.create({
      data: {
        parkingId: parseInt(parkingID),
        userId: newWarden.id
      }
    })
    res.json({ message: 'Warden added successfully' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to add warden', error: error.message })
  }
}
async function updateWarden(req: express.Request, res: express.Response) {
  const { wardenId } = req.params
  const { name, email } = req.body
  const owner = req.user

  try {
    const warden = await prisma.user.findUnique({
      where: { id: parseInt(wardenId) }
    })

    if (!warden) {
      res.status(404).json({ message: 'Warden not found' })
      return
    }

 
    if (owner.role !== 'OWNER') {
      res.status(403).json({ message: 'You are not authorized to update this warden' })
      return
    }

    const updatedWarden = await prisma.user.update({
      where: { id: parseInt(wardenId) },
      data: { name, email }
    })

    res.json({ message: 'Warden updated successfully', warden: updatedWarden })
  } catch (error) {
    res.status(500).json({ message: 'Failed to update warden', error: error.message })
  }
}
async function deleteWarden(req: express.Request, res: express.Response) {
  const { wardenId } = req.params
  const owner = req.user

  try {
    const warden = await prisma.user.findUnique({
      where: { id: parseInt(wardenId) }
    })

    if (!warden) {
      res.status(404).json({ message: 'Warden not found' })
      return
    }

 
    if (owner.role !== 'OWNER') {
      res.status(403).json({ message: 'You are not authorized to delete this warden' })
      return
    }

    await prisma.user.delete({
      where: { id: parseInt(wardenId) }
    })

    res.json({ message: 'Warden deleted successfully' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete warden', error: error.message })
  }
}

export { getAllWardens, getParkingWardens, addWarden, deleteWarden, updateWarden }


import { PrismaClient, User } from '@prisma/client'
import express from 'express'

const prisma = new PrismaClient()

async function ownerInfo(user: User): Promise<OwnerInfo> {
  const userData = await prisma.user.findUnique({
    where: { id: user.id },
    select: {
      id: true,
      name: true,
      email: true,
      parkings: {
        select: {
          id: true,
          name: true,
          parkedCars: true // This will get the array to calculate length
        }
      }
    }
  })

  if (!userData) {
    throw new Error('User not found')
  }

  // Format the response to include the number of cars in each parking
  return {
    id: userData.id,
    name: userData.name,
    email: userData.email,
    parkings: userData.parkings.map(parking => ({
      id: parking.id,
      name: parking.name,
      parkedCars: parking.parkedCars.length
    }))
  }
}

async function wardenInfo(user: User): Promise<any> {
  const assignments = await prisma.wardenAssignment.findMany({
    where: { userId: user.id },
    select: {
      parking: {
        select: {
          id: true,
          name: true
        }
      }
    }
  })

  return assignments.map(assignment => ({
    parkingId: assignment.parking.id,
    parkingName: assignment.parking.name
  }))
}

async function customerInfo(user: User): Promise<CustomerInfo> {
  const userData = await prisma.user.findUnique({
    where: { id: user.id },
    select: {
      id: true,
      name: true,
      email: true,
      credit: true,
      cars: {
        select: {
          id: true,
          licencePlate: true,
          parkingSessions: {
            select: {
              id: true,
              startTime: true,
              endTime: true,
              parking: {
                select: {
                  id: true,
                  name: true
                }
              }
            }
          }
        }
      }
    }
  })

  if (!userData) {
    throw new Error('User not found')
  }

  return {
    id: userData.id,
    name: userData.name,
    email: userData.email,
    credit: userData.credit,
    cars: userData.cars.map(car => ({
      id: car.id,
      licencePlate: car.licencePlate,
      parkingSessions: car.parkingSessions.map(session => ({
        id: session.id,
        startTime: session.startTime,
        endTime: session.endTime,
        parkingName: session.parking.name
      }))
    }))
  }
}
async function addCredit(req: express.Request, res: express.Response) {
  const user = req.user
  const { amount } = req.body

  try {
    const existingUser = await prisma.user.findUnique({
      where: { id: user.id }
    })

    if (!existingUser) {
      return res.status(404).json({ message: 'User not found' })
    }

    const updatedUser = await prisma.user.update({
      where: { id: user.id },
      data: { credit: existingUser.credit + amount }
    })

    res.json({
      message: `Succeffully added ${amount} to your account, new balance is ${updatedUser.credit}`
    })
  } catch (error) {
    res.status(500).json({ message: 'Failed to add credit', error: error.message })
  }
}
async function checkCredit(req: express.Request, res: express.Response) {
  const user = req.user

  try {
    const existingUser = await prisma.user.findUnique({
      where: { id: user.id }
    })

    if (!existingUser) {
      return res.status(404).json({ message: 'User not found' })
    }

    res.json({ message: `Your current balance is ${existingUser.credit}` })
  } catch (error) {
    res.status(500).json({ message: 'Failed to check credit', error: error.message })
  }
}

async function currentUser(req: express.Request, res: express.Response): Promise<void> {
  const user = req.user

  if (!user) {
    res.status(403).json({ message: 'No user logged in' })
    return
  }

  try {
    let responseData

    switch (user.role) {
      case 'OWNER':
        responseData = await ownerInfo(user)
        break
      case 'WARDEN':
        responseData = await wardenInfo(user)
        break
      case 'CUSTOMER':
        responseData = await customerInfo(user)
        break
      default:
        res.status(403).json({ message: 'Invalid user role' })
        return
    }

    res.json(responseData)
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: 'Internal server error' })
  }
}

async function updateUser(req: express.Request, res: express.Response) {
  const user = req.user
  const userID = parseInt(req.params.userID, 10)
  const { name, email } = req.body
  if (user.id !== userID) {
    return res.status(403).json({ message: 'You are not authorized to update this User' })
  }

  try {
    const existingUser = await prisma.user.findUnique({
      where: { id: user.id }
    })
    if (!existingUser) {
      return res.status(404).json({ message: 'User not found' })
    }

    await prisma.user.update({
      where: { id: user.id },
      data: {
        name: name ?? user.name,
        email: email ?? existingUser.email
      }
    })
    res.json('user updated')
  } catch (error) {
    res.status(500).json({ message: 'Failed to update parking', error: error.message })
  }
}

async function deleteUser(req: express.Request, res: express.Response) {
  const { userID } = req.params
  const user = req.user

  try {
    const existingUser = await prisma.user.findUnique({
      where: { id: parseInt(userID, 10) }
    })
    if (!existingUser) {
      return res.status(404).json({ message: 'User not found' })
    }
    if (existingUser.id !== user.id) {
      return res.status(403).json({ message: 'You are not authorized to delete this User' })
    }

    await prisma.user.delete({
      where: { id: parseInt(userID, 10) }
    })
    res.json({ message: 'User deleted successfully' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete User', error: error.message })
  }
}
export { currentUser, updateUser, deleteUser, addCredit, checkCredit }
import { PrismaClient } from '@prisma/client'
import { compareSync, hashSync } from 'bcrypt'
import express from 'express'
import * as jwt from 'jsonwebtoken'
import { sendPasswordResetEmail } from './utils/emailService'

const prisma = new PrismaClient()
const secret = process.env.JWT_SECRET as string

export const register = async (req: express.Request, res: express.Response) => {
  const { email, password, name } = req.body
  if (!email || !password || !name) {
    return res.status(400).json('Missing required fields')
  }

  try {
    const userExist = await prisma.user.findUnique({ where: { email } })
    if (userExist) {
      return res.status(409).json('Email already in use')
    }

    const hashedPassword = hashSync(password, 10)
    const newUser = await prisma.user.create({
      data: {
        name,
        email,
        password: hashedPassword
      }
    })

    res.status(200).json({ message: `User created successfully, welcome ${newUser.name}` })
  } catch (error) {
    console.error('Error during user registration:', error)
    res.status(500).json('An error occurred while creating the user')
  }
}

export const login = async (req: express.Request, res: express.Response) => {
  const { email, password } = req.body

  try {
    const user = await prisma.user.findUnique({ where: { email } })
    if (!user) {
      return res.status(404).json('User not found')
    }

    const correctPassword = compareSync(password, user.password)
    if (!correctPassword) {
      return res.status(401).json('Invalid credentials')
    }

    const token = await attachToken(user.id)
    res.status(200).json({ message: `Welcome Back ${user.name}`, accessToken: token })
  } catch (error) {
    console.error('Login error:', error)
    res.status(500).json('An error occurred during login')
  }
}

export const logout = async (req: express.Request, res: express.Response) => {
  const token = req.headers.authorization
  if (!token) {
    return res.status(400).json({ message: 'No token provided' })
  }

  try {
    const deletedAuth = await prisma.auth.deleteMany({
      where: { sessionToken: token }
    })

    if (deletedAuth.count === 0) {
      return res.status(400).json({ message: 'Token not found' })
    }

    res.status(200).json({ message: 'Logged out successfully' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to logout', error: error.message })
  }
}
export const lostPassword = async (req: express.Request, res: express.Response) => {
  const { email } = req.body

  try {
    const user = await prisma.user.findUnique({ where: { email } })

    if (!user) {
      return res.status(404).json('User not found')
    }

    const token = await attachPasswordToken(user.id)
    sendPasswordResetEmail(user.email, token)

    res.status(200).json({ message: `Reset password link sent to ${user.email}` })
  } catch (error) {
    console.error('Error sending password reset email:', error)
    res.status(500).json('An error occurred while sending the password reset email')
  }
}
export const resetPassword = async (req: express.Request, res: express.Response) => {
  const { passwordToken } = req.params
  const { password } = req.body

  try {
    const hashedPassword = hashSync(password, 10)
    const auth = await prisma.auth.findFirst({
      where: { passwordToken }
    })
    await prisma.user.update({
      where: { id: auth.userId },
      data: { password: hashedPassword }
    })
    await prisma.auth.deleteMany({ where: { passwordToken } })
    res.status(200).json({ message: 'Password reset successfully' })
  } catch (error) {
    res.status(500).json('An error occurred during password reset')
  }
}
async function attachToken(userID: number): Promise<string> {
  const token = jwt.sign({ userID }, secret, { expiresIn: '15min' })

  const existingAuth = await prisma.auth.findUnique({
    where: { userId: userID }
  })

  if (existingAuth) {
    await prisma.auth.update({
      where: { userId: userID },
      data: { sessionToken: token }
    })
  } else {
    await prisma.auth.create({
      data: {
        sessionToken: token,
        user: {
          connect: { id: userID }
        }
      }
    })
  }

  return token
}
async function attachPasswordToken(userID: number): Promise<string> {
  const passwordToken = jwt.sign({ userID }, secret, { expiresIn: '1d' })

  const existingAuth = await prisma.auth.findUnique({
    where: { userId: userID }
  })

  if (existingAuth) {
    await prisma.auth.update({
      where: { userId: userID },
      data: { passwordToken: passwordToken }
    })
  } else {
    await prisma.auth.create({
      data: {
        passwordToken: passwordToken,
        user: {
          connect: { id: userID }
        }
      }
    })
  }

  return passwordToken
}

import { PrismaClient } from '@prisma/client'
import express from 'express'

const prisma = new PrismaClient()

async function addCar(req: express.Request, res: express.Response): Promise<void> {
  const owner = req.user
  const { licencePlate } = req.body

  if (!owner) {
    res.status(403).json({ message: 'Must be logged in to register a car' })
    return
  }

  try {
    const carExists = await prisma.car.findUnique({
      where: { licencePlate }
    })

    if (carExists) {
      res.status(409).json({ message: 'Licence plate already in use' })
      return
    }

    await prisma.car.create({
      data: {
        licencePlate,
        owner: {
          connect: {
            id: owner.id
          }
        }
      }
    })

    res.status(201).json({ message: 'Car created!' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to create car', error: error.message })
  }
}

async function updateCar(req: express.Request, res: express.Response): Promise<void> {
  const { licencePlate } = req.params
  const { newLicence } = req.body
  const owner = req.user

  if (!owner) {
    res.status(403).json({ message: 'Must be logged in to modify a car' })
    return
  }

  try {
    const car = await prisma.car.findUnique({
      where: { licencePlate }
    })

    if (!car) {
      res.status(404).json({ message: 'Wrong licence Plate' })
      return
    }

    if (car.userId != owner.id) {
      res.status(403).json({ message: 'Not your car!' })
      return
    }

    await prisma.car.update({
      where: { licencePlate },
      data: { licencePlate: newLicence }
    })

    res.status(200).json({ message: `Licence plate updated to: ${newLicence}` })
  } catch (error) {
    res.status(500).json({ message: 'Failed to modify car', error: error.message })
  }
}

async function deleteCar(req: express.Request, res: express.Response): Promise<void> {
  const { licencePlate } = req.params
  const owner = req.user

  if (!owner) {
    res.status(403).json({ message: 'Must be logged in to delete a car' })
    return
  }

  try {
    const car = await prisma.car.findUnique({
      where: { licencePlate }
    })

    if (!car) {
      res.status(404).json({ message: 'Car not found' })
      return
    }

    if (car.userId !== owner.id) {
      res.status(403).json({ message: 'You are not authorized to delete this car' })
      return
    }

    await prisma.car.delete({
      where: { licencePlate }
    })

    res.status(200).json({ message: 'Car deleted successfully' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete car', error: error.message })
  }
}

export { addCar, updateCar, deleteCar }

import { PrismaClient } from '@prisma/client'
import express from 'express'
import { Role } from '@prisma/client'
import getCoordinates from './utils/location'

const prisma = new PrismaClient()

const getAllParkings = async (req: express.Request, res: express.Response) => {
  const user = req.user
  const role = req.role
  if (role === Role.OWNER) {
    try {
      const parkings = await prisma.parking.findMany({ where: { parkingAdminId: user.id } })
      res.status(200).json(parkings)
    } catch (error) {
      res.status(500).json({ message: 'Failed to retrieve parkings', error: error.message })
    }
  }
  try {
    const parkings = await prisma.parking.findMany()
    res.status(200).json(parkings)
  } catch (error) {
    res.status(500).json({ message: 'Failed to retrieve parkings', error: error.message })
  }
}

const getParkingById = async (req: express.Request, res: express.Response) => {
  const { parkingID } = req.params
  try {
    const parking = await prisma.parking.findUnique({
      where: { id: parseInt(parkingID, 10) }
    })
    if (parking) {
      res.json(parking)
    } else {
      res.status(404).json({ message: 'Parking not found' })
    }
  } catch (error) {
    res.status(500).json({ message: 'Failed to retrieve parking', error: error.message })
  }
}
const createParking = async (req: express.Request, res: express.Response) => {
  const { name, address, totalSpaces } = req.body
  const parkingAdmin = req.user
  const userRole = req.role

  if (!parkingAdmin || !parkingAdmin.id) {
    return res.status(403).json({ message: 'No parking admin specified or incorrect user data' })
  }

  if (!name || !address) {
    return res.status(400).json({ message: 'Missing required fields: name or address' })
  }

  try {
    const location = await getCoordinates(address)

    await prisma.$transaction(async tx => {
      const newLocation = await tx.location.create({
        data: {
          latitude: location.lat,
          longitude: location.lng
        }
      })

      const parking = await tx.parking.create({
        data: {
          name,
          location: {
            connect: {
              id: newLocation.id
            }
          },
          totalSpaces: totalSpaces || 10,
          parkingAdmin: {
            connect: {
              id: parkingAdmin.id
            }
          }
        }
      })

      let roleUpdated = false
      if (userRole !== Role.OWNER) {
        await tx.user.update({
          where: { id: parkingAdmin.id },
          data: { role: Role.OWNER }
        })
        roleUpdated = true
      }

      res.status(200).json({
        parking,
        message: roleUpdated ? 'User role updated to OWNER.' : 'User role unchanged.'
      })
    })
  } catch (error) {
    res.status(500).json({ message: 'Failed to create parking', error: error.message })
  }
}

export default createParking

const updateParking = async (req: express.Request, res: express.Response) => {
  const { parkingID } = req.params
  const { name, address, totalSpaces } = req.body
  const owner = req.user
  const location = await getCoordinates(address)
  try {
    const existingParking = await prisma.parking.findUnique({
      where: { id: parseInt(parkingID, 10) }
    })
    if (!existingParking) {
      return res.status(404).json({ message: 'Parking not found' })
    }
    if (existingParking.parkingAdminId !== owner?.id) {
      return res.status(403).json({ message: 'You are not authorized to update this parking' })
    }

    const updatedParking = await prisma.parking.update({
      where: { id: parseInt(parkingID, 10) },
      data: {
        name: name ?? existingParking.name,
        location: location ?? existingParking.locationId,
        totalSpaces: totalSpaces ?? existingParking.totalSpaces
      }
    })
    res.json(updatedParking)
  } catch (error) {
    res.status(500).json({ message: 'Failed to update parking', error: error.message })
  }
}

const deleteParking = async (req: express.Request, res: express.Response) => {
  const { parkingID } = req.params
  const owner = req.user

  try {
    const existingParking = await prisma.parking.findUnique({
      where: { id: parseInt(parkingID, 10) }
    })
    if (!existingParking) {
      return res.status(404).json({ message: 'Parking not found' })
    }
    if (existingParking.parkingAdminId !== owner?.id) {
      return res.status(403).json({ message: 'You are not authorized to delete this parking' })
    }

    await prisma.parking.delete({
      where: { id: parseInt(parkingID, 10) }
    })
    res.json({ message: 'Parking deleted successfully' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete parking', error: error.message })
  }
}

const checkCars = async (req: express.Request, res: express.Response) => {
  const { parkingID } = req.params

  if (!parkingID) {
    return res.status(404).json({ message: "Can't find parking" })
  }

  try {
    const parking = await prisma.parking.findUnique({
      where: { id: parseInt(parkingID, 10) },
      select: { parkedCars: true, _count: true }
    })

    if (parking) {
      res.json(parking)
    } else {
      res.status(404).json({ message: 'Parking not found' })
    }
  } catch (error) {
    res.status(500).json({ message: 'Failed to retrieve parking info', error: error.message })
  }
}

export { getAllParkings, getParkingById, createParking, updateParking, deleteParking, checkCars }

import express from 'express'
import { PrismaClient } from '@prisma/client'
import { findParkingById, checkUserPermission, findSessionbyID, findUserById } from './utils'

const prisma = new PrismaClient()

async function isParkingFull(parkingID: number): Promise<boolean> {
  const selectedParking = await prisma.parking.findUnique({
    where: { id: parkingID },
    include: { parkedCars: true }
  })

  if (!selectedParking) {
    return false
  }

  return selectedParking.parkedCars.length >= selectedParking.totalSpaces
}

async function startParkingSession(req: express.Request, res: express.Response) {
  const { parkingID } = req.params
  const { licencePlate, totalHours } = req.body
  const carOwner = req.user

  if (!parkingID) {
    res.status(404).json({ message: 'Must give parking ID' })
    return
  }

  try {
    const parkingId = parseInt(parkingID, 10)
    if (isNaN(parkingId)) {
      res.status(400).json({ message: 'Invalid parking ID' })
      return
    }

    const isFull = await isParkingFull(parkingId)
    if (isFull) {
      res.status(406).json({ message: 'Selected parking is full' })
      return
    }

    const selectedParking = await findParkingById(parkingID)
    if (!selectedParking) {
      res.status(404).json({ message: 'Parking not found' })
      return
    }

    const car = await prisma.car.findUnique({
      where: { licencePlate: licencePlate }
    })
    if (!car) {
      res.status(404).json({ message: 'Car not found' })
      return
    }

    const endTime = new Date()
    endTime.setHours(endTime.getHours() + totalHours)
    const amount = totalHours * selectedParking.hourlyPrice

    await prisma.$transaction(async prisma => {
      const session = await prisma.parkingSession.create({
        data: {
          carId: car.id,
          parkingId: selectedParking.id,
          startTime: new Date(),
          endTime: endTime,
          amount: amount
        }
      })

      await prisma.car.update({
        where: { id: car.id },
        data: { parkingId: selectedParking.id }
      })

      await prisma.parking.update({
        where: { id: selectedParking.id },
        data: {
          parkedCars: {
            connect: { id: car.id }
          },
          takings: {
            increment: amount
          }
        }
      })

      await prisma.user.update({
        where: { id: carOwner.id },
        data: { credit: { decrement: amount } }
      })

      return session
    })

    res.status(201).json({ message: 'Session created successfully!', endTime: endTime })
  } catch (error) {
    res.status(500).json({ message: 'Failed to start parking session', error: error.message })
  }
}

async function getAllParkingSessions(req: express.Request, res: express.Response) {
  try {
    const sessions = await prisma.parkingSession.findMany({
      include: {
        car: true,
        parking: true
      }
    })

    res.status(200).json(sessions)
  } catch (error) {
    res.status(500).json({ message: 'Failed to retrieve parking sessions', error: error.message })
  }
}

async function deleteParkingSession(req: express.Request, res: express.Response) {
  const { sessionId } = req.params

  try {
    const session = await findSessionbyID(parseInt(sessionId, 10))

    if (!session) {
      res.status(404).json({ message: 'Parking session not found' })
      return
    }

    await prisma.parkingSession.delete({
      where: { id: parseInt(sessionId, 10) }
    })

    res.status(200).json({ message: 'Parking session deleted successfully' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete parking session', error: error.message })
  }
}

async function updateParkingSession(req: express.Request, res: express.Response) {
  const { sessionId } = req.params
  const { endTime } = req.body

  try {
    const session = await prisma.parkingSession.findUnique({
      where: { id: parseInt(sessionId, 10) },
      include: {
        parking: true,
        car: {
          include: {
            owner: true
          }
        }
      }
    })

    if (!session) {
      res.status(404).json({ message: 'Parking session not found' })
      return
    }

    const originalAmount = session.amount
    const newEndTime = new Date(endTime)
    const totalHours = (newEndTime.getTime() - session.startTime.getTime()) / (1000 * 60 * 60)
    const newAmount = totalHours * session.parking.hourlyPrice

    const amountDifference = newAmount - originalAmount

    await prisma.$transaction(async prisma => {
      await prisma.parkingSession.update({
        where: { id: session.id },
        data: { endTime: newEndTime, amount: newAmount }
      })

      await prisma.parking.update({
        where: { id: session.parkingId },
        data: { takings: { increment: amountDifference } }
      })

      await prisma.user.update({
        where: { id: session.car.owner.id },
        data: { credit: { decrement: amountDifference } }
      })
    })

    res.status(200).json({ message: 'Parking session updated successfully' })
  } catch (error) {
    res.status(500).json({ message: 'Failed to update parking session', error: error.message })
  }
}

export { startParkingSession, deleteParkingSession, getAllParkingSessions, updateParkingSession }
