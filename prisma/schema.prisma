generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Auth {
  id            Int      @id @default(autoincrement())
  sessionToken  String?  @unique
  passwordToken String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])

  @@map("auths")
}

model Location {
  id        Int      @id @default(autoincrement())
  latitude  Float
  longitude Float
  parking   Parking?

  @@map("locations")
}

model Parking {
  id               Int                @id @default(autoincrement())
  name             String
  totalSpaces      Int                @default(0)
  hourlyPrice      Float              @default(0.5)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  parkingAdminId   Int
  locationId       Int                @unique
  takings          Float              @default(0)
  parkedCars       Car[]
  parkingSessions  ParkingSession[]
  parkingAdmin     User               @relation(fields: [parkingAdminId], references: [id])
  location         Location           @relation(fields: [locationId], references: [id])
  WardenAssignment WardenAssignment[]

  @@index([parkingAdminId], map: "parkings_parkingAdminId_fkey")
  @@map("parkings")
}
model Car {
  id              Int              @id @default(autoincrement())
  licencePlate    String           @unique
  parkingId       Int?
  userId          Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parkedAt        Parking?         @relation(fields: [parkingId], references: [id])
  owner           User             @relation(fields: [userId], references: [id])
  parkingSessions ParkingSession[]

  @@index([parkingId], map: "cars_parkingId_fkey")
  @@index([userId], map: "cars_userId_fkey")
  @@map("cars")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  credit           Float              @default(50)
  role             Role               @default(CUSTOMER)
  auth             Auth?
  cars             Car[]
  parkings         Parking[]
  WardenAssignment WardenAssignment[]

  @@map("users")
}

model WardenAssignment {
  parkingId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parking   Parking  @relation(fields: [parkingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([parkingId, userId])
  @@index([userId], map: "wardens_userId_fkey")
  @@map("wardens")
}

model ParkingSession {
  id        Int       @id @default(autoincrement())
  startTime DateTime  @default(now())
  endTime   DateTime?
  carId     Int
  parkingId Int
  amount    Float
  car       Car       @relation(fields: [carId], references: [id])
  parking   Parking   @relation(fields: [parkingId], references: [id])

  @@index([carId], map: "parking_sessions_carId_fkey")
  @@index([parkingId], map: "parking_sessions_parkingId_fkey")
  @@map("parking_sessions")
}

enum Role {
  OWNER
  WARDEN
  CUSTOMER
}