// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  WARDEN
  CUSTOMER
}

model Parking {
  id              Int                @id @default(autoincrement())
  name            String
  location        String
  totalSpaces     Int                @default(0)
  parkedCars      Car[]
  hourlyPrice     Float              @default(0.5)
  takings         Float              @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  parkingAdmin    User               @relation(fields: [parkingAdminId], references: [id])
  parkingAdminId  Int
  wardens         WardenAssignment[]
  parkingSessions ParkingSession[]

  @@map("parkings")
}

model Car {
  id              Int              @id @default(autoincrement())
  licencePlate    String           @unique
  parkedAt        Parking?         @relation(fields: [parkingId], references: [id])
  parkingId       Int?
  owner           User             @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parkingSessions ParkingSession[]

  @@map("cars")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  name             String
  credit           Float              @default(50)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  role             Role               @default(CUSTOMER)
  cars             Car[]
  parkings         Parking[]
  WardenAssignment WardenAssignment[]

  @@map("users")
}

model WardenAssignment {
  parkingId Int
  userId    Int
  parking   Parking  @relation(fields: [parkingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([parkingId, userId])
  @@map("wardens")
}

model ParkingSession {
  id        Int       @id @default(autoincrement())
  startTime DateTime  @default(now())
  endTime   DateTime?
  carId     Int
  parkingId Int
  amount   Float 
  car       Car       @relation(fields: [carId], references: [id])
  parking   Parking   @relation(fields: [parkingId], references: [id])

  @@map("parking_sessions")
}
